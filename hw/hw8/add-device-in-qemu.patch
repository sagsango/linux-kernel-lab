From 7ccf0e8a4cc3811f01884a96ac021612abeb2e32 Mon Sep 17 00:00:00 2001
From: Ubuntu <ssing214@ssing214-vm.cs.uic.edu>
Date: Sat, 15 Mar 2025 00:15:20 +0000
Subject: [PATCH] hw8 - device driver!!

---
 hw/misc/Kconfig     |  4 ++
 hw/misc/meson.build |  2 +
 hw/misc/my-rng.c    | 94 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 100 insertions(+)
 create mode 100644 hw/misc/my-rng.c

diff --git a/hw/misc/Kconfig b/hw/misc/Kconfig
index cc8a8c141..d6bc66045 100644
--- a/hw/misc/Kconfig
+++ b/hw/misc/Kconfig
@@ -1,3 +1,7 @@
+config MY_RNG
+    bool
+    default y
+
 config APPLESMC
     bool
     depends on ISA_BUS
diff --git a/hw/misc/meson.build b/hw/misc/meson.build
index 36c20d563..37a2c5437 100644
--- a/hw/misc/meson.build
+++ b/hw/misc/meson.build
@@ -1,3 +1,5 @@
+system_ss.add(when: 'CONFIG_MY_RNG', if_true: files('my-rng.c'))
+
 system_ss.add(when: 'CONFIG_APPLESMC', if_true: files('applesmc.c'))
 system_ss.add(when: 'CONFIG_EDU', if_true: files('edu.c'))
 system_ss.add(when: 'CONFIG_FW_CFG_DMA', if_true: files('vmcoreinfo.c'))
diff --git a/hw/misc/my-rng.c b/hw/misc/my-rng.c
new file mode 100644
index 000000000..98cf13356
--- /dev/null
+++ b/hw/misc/my-rng.c
@@ -0,0 +1,94 @@
+#include "qemu/osdep.h"
+#include "hw/pci/msi.h"
+#include "hw/pci/pci.h"
+#include <time.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "qemu/log.h"
+
+#define TYPE_MY_RNG "my_rng"
+#define MY_RNG(obj) OBJECT_CHECK(my_rng, (obj), TYPE_MY_RNG)
+typedef struct {
+	PCIDevice parent_obj;
+	uint32_t num;
+	uint32_t seed_register;
+	MemoryRegion mmio;
+} my_rng;
+
+static uint64_t mmio_read(void *opaque, hwaddr addr, unsigned size) {
+	/* TODO implement that function later */
+	my_rng *s = (my_rng *)opaque;
+	if (size == 0x4) {
+		switch(addr) {
+			case 0x0: {
+				s->num = rand();
+				return s->num; /* This is read value */
+			}
+			case 0x4: {
+				/* We dont use this case */
+				s->seed_register = s->seed_register;
+				return s->seed_register;
+			}
+		}
+	}
+	return -1;
+}
+static void mmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned size) {
+	/* TODO implement that function later */
+	my_rng *s = (my_rng *)opaque;
+	if (size == 0x4) {
+		switch (addr) {
+			case 0x0: {
+				/* We dont use this case */
+				s->num = val;
+				break;
+			}
+			case 0x4: {
+				s->seed_register = val;
+				srand(val);
+				break;
+			}
+		}
+	}
+	return;
+}
+static const MemoryRegionOps my_rng_ops = {
+	.read = mmio_read,
+	.write = mmio_write,
+};
+
+static void my_rng_realize(PCIDevice *pdev, Error **errp) {
+	qemu_log_mask(LOG_GUEST_ERROR, "Ring init happening\n");
+	my_rng *s = MY_RNG(pdev);
+	s->num = s->seed_register = 0xffffffff;
+
+	memory_region_init_io(&s->mmio, OBJECT(s), &my_rng_ops, s,
+			      "my_rng", 4096);
+	pci_register_bar(&s->parent_obj, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &s->mmio);
+}
+static void my_rng_class_init(ObjectClass *class, void *data) {
+	DeviceClass *dc = DEVICE_CLASS(class);
+	PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
+	k->realize = my_rng_realize;
+	k->vendor_id = PCI_VENDOR_ID_QEMU;
+	k->device_id = 0xcafe;
+	k->revision = 0x10;
+	k->class_id = PCI_CLASS_OTHERS;
+	set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+}
+static void my_rng_register_types(void) {
+	static InterfaceInfo interfaces[] = {
+		{ INTERFACE_CONVENTIONAL_PCI_DEVICE },
+		{ },
+	};
+	static const TypeInfo my_rng_info = {
+		.name = TYPE_MY_RNG,
+		.parent = TYPE_PCI_DEVICE,
+		.instance_size = sizeof(my_rng),
+		.class_init = my_rng_class_init,
+		.interfaces = interfaces,
+	};
+	type_register_static(&my_rng_info);
+}
+type_init(my_rng_register_types)
-- 
2.43.0

