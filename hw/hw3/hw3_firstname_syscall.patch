diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 7e8d46f4147f..c58ac19c5376 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -428,3 +428,6 @@
 547	x32	pwritev2		compat_sys_pwritev64v2
 # This is the end of the legacy x32 range.  Numbers 548 and above are
 # not special and are not to be used for x32-specific syscalls.
+
+# syscall for the cs561
+548	64	s2_encrypt   		sys_s2_encrypt
diff --git a/kernel/Makefile b/kernel/Makefile
index ce105a5558fc..e4df3ef70c8b 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -10,7 +10,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o regset.o ksyms_common.o
+	    async.o range.o smpboot.o ucount.o regset.o ksyms_common.o s2_encrypt.o
 
 obj-$(CONFIG_USERMODE_DRIVER) += usermode_driver.o
 obj-$(CONFIG_MULTIUSER) += groups.o
diff --git a/kernel/s2_encrypt.c b/kernel/s2_encrypt.c
new file mode 100644
index 000000000000..2308f9e55ff6
--- /dev/null
+++ b/kernel/s2_encrypt.c
@@ -0,0 +1,31 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>  // For copy_from_user()
+#include <linux/errno.h>
+
+SYSCALL_DEFINE2(s2_encrypt, char __user *, input_str, int, key)
+{
+    char str[256]; // Assuming input string size is within 256 characters
+    int i;
+
+    // Check if the key is within the valid range
+    if (key < 1 || key > 5) {
+        return -EINVAL;  // Return error if key is out of range
+    }
+
+    // Copy the string from user space to kernel space
+    if (copy_from_user(str, input_str, 256)) {
+        return -EFAULT;  // Return error if unable to copy from user space
+    }
+
+    // Encrypt the string by adding the key to each character
+    for (i = 0; str[i] != '\0'; i++) {
+        str[i] += key;
+    }
+
+    // Print the encrypted string using printk
+    printk(KERN_INFO "Encrypted String: %s\n", str);
+
+    return 0;  // Return 0 to indicate success
+}
+
